function [out] = sim_KF(cfg)


% configuration input
% traj  : mean trajectory array
% isvol : boolean: volatile condition or not 
% vs    : measurement uncertainty
% vd    : process noise / drift variance

nt = numel(cfg.traj);

% static parameters
vs = var(epis_vol-traj_vol);
vd = var_drift_ef;

% allocate variables
kt = nan(1,nt); % kalman gain
vt = nan(1,nt); % posterior variance
mt = nan(1,nt); % estimated mean
rt = nan(1,nt); % KF responses
pt = nan(1,nt); % probability of correct KF responses (argmax)

resp_up = false; % whether response is above .5 or below
iepi = 0;
% filter
for it = 1:nt
    if ismember(it,epistart)
        resp_up = ~resp_up;
        
        iepi = iepi + 1;
        % reset initial values for REF condition
        mt_ref(it) = mean(traj_ref);
        vt_ref(it) = var(traj_ref);
        kt_ref(it) = 1;
    else
        mt_ref(it) = mt_ref(it-1);
        vt_ref(it) = vt_ref(it-1);
        kt_ref(it) = kt_ref(it-1);
    end
    
    if it == 1
        mt_vol(1) = mean(traj_vol); % mean of latent trajectory
        vt_vol(1) = var(traj_vol);  % variance of latent trajectory
        kt_vol(1) = 1;
    else
        mt_vol(it) = mt_vol(it-1);
        vt_vol(it) = vt_vol(it-1);
        kt_vol(it) = kt_vol(it-1);
    end
    
    % get responses and correct response probabilities for the KF
    if resp_up
        rt_vol(it) = mt_vol(it) >= .5;
        pt_vol(it) = 1-normcdf(.5,mt_vol(it),vt_vol(it));
        
        rt_ref(it) = mt_ref(it) >= .5;
        pt_ref(it) = 1-normcdf(.5,mt_ref(it),vt_ref(it));
    else
        rt_vol(it) = mt_vol(it) < .5;
        pt_vol(it) = normcdf(.5,mt_vol(it),vt_vol(it));
        
        rt_ref(it) = mt_ref(it) < .5;
        pt_ref(it) = normcdf(.5,mt_ref(it),vt_ref(it));
    end
    
    % REF KF update
    kt(it) = vt(it)/(vt(it)+vs);
    mt(it) = mt(it) + kt(it)*(traj(it)-mt(it));
    vt(it) = (1-kt(it))*vt(it)+vd;
end








end